version: '3.8'

services:
  neo4j:
    image: neo4j:5.15
    container_name: panther-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/pantherpassword
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./neo4j/schema.cypher:/var/lib/neo4j/import/schema.cypher
    networks:
      - panther-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "pantherpassword", "MATCH () RETURN count(*) as count"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  crawl4ai-rag:
    build: 
      context: ../crawl4ai-rag
      dockerfile: Dockerfile
    container_name: panther-crawl4ai-rag
    ports:
      - "8001:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - NEO4J_DATABASE=neo4j
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - panther-network
    volumes:
      - crawl_data:/app/data

  prem-intel-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: panther-prem-intel
    ports:
      - "8002:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - NEO4J_DATABASE=neo4j
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - panther-network

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  crawl_data:

networks:
  panther-network:
    driver: bridge 