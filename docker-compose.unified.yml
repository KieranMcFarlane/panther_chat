version: '3.8'

services:
  # Global Neo4j Knowledge Graph - seeded with sportsWorldSeed.json
  global-neo4j:
    image: neo4j:5.15-community
    container_name: global-sports-neo4j
    environment:
      - NEO4J_AUTH=neo4j/pantherpassword
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=512M
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - global_neo4j_data:/data
      - global_neo4j_logs:/logs
      - global_neo4j_import:/var/lib/neo4j/import
      - global_neo4j_plugins:/plugins
      - ./yellow-panther-ai/scraping_data:/var/lib/neo4j/import/seed_data:ro
      - ./prem-intel-graph/neo4j/schema.cypher:/var/lib/neo4j/import/schema.cypher:ro
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "pantherpassword", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - unified-sports-network

  # Unified Knowledge Graph Seeder
  kg-seeder:
    build:
      context: ./yellow-panther-ai
      dockerfile: ../Dockerfile.kg-seeder
    container_name: unified-kg-seeder
    environment:
      - NEO4J_URI=bolt://global-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - NODE_ENV=production
    depends_on:
      global-neo4j:
        condition: service_healthy
    volumes:
      - ./yellow-panther-ai/scraping_data:/app/scraping_data:ro
      - ./prem-intel-graph/data:/app/prem_intel_data:ro
    networks:
      - unified-sports-network
    command: ["node", "scripts/seedGraph.js"]

  # Enhanced Crawl4AI RAG Service with Global KG Integration
  enhanced-crawl4ai-rag:
    build:
      context: ./crawl4ai-rag
      dockerfile: ../Dockerfile.enhanced-crawl4ai
    container_name: enhanced-crawl4ai-rag
    environment:
      - NEO4J_URI=bolt://global-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app:/app/knowledge_graphs
    ports:
      - "8001:8000"
    depends_on:
      global-neo4j:
        condition: service_healthy
      kg-seeder:
        condition: service_completed_successfully
    volumes:
      - ./crawl4ai-rag:/app:ro
      - crawl4ai_cache:/app/.cache
    networks:
      - unified-sports-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Premier League Intelligence Graph Service
  prem-intel-service:
    build:
      context: ./prem-intel-graph
      dockerfile: ../Dockerfile.prem-intel
    container_name: prem-intel-service
    environment:
      - NEO4J_URI=bolt://global-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - NODE_ENV=production
    ports:
      - "8002:3000"
    depends_on:
      global-neo4j:
        condition: service_healthy
      kg-seeder:
        condition: service_completed_successfully
    volumes:
      - ./prem-intel-graph:/app:ro
    networks:
      - unified-sports-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unified MCP Server
  unified-mcp-server:
    build:
      context: ./crawl4ai-rag
      dockerfile: ../Dockerfile.unified-mcp
    container_name: unified-mcp-server
    environment:
      - NEO4J_URI=bolt://global-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PYTHONPATH=/app:/app/knowledge_graphs
    ports:
      - "8003:8000"
    depends_on:
      enhanced-crawl4ai-rag:
        condition: service_healthy
      prem-intel-service:
        condition: service_healthy
    volumes:
      - ./crawl4ai-rag:/app:ro
    networks:
      - unified-sports-network
    command: ["python", "src/enhanced_crawl4ai_mcp.py"]

  # FastAPI Service with Ollama Integration
  ollama-fastapi-service:
    build:
      context: .
      dockerfile: Dockerfile.ollama-fastapi
    container_name: ollama-fastapi-service
    environment:
      - NEO4J_URI=bolt://global-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pantherpassword
      - OLLAMA_HOST=${OLLAMA_HOST:-http://host.docker.internal:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-o3-mini}
      - FASTAPI_HOST=0.0.0.0
      - FASTAPI_PORT=8000
    ports:
      - "8000:8000"
    depends_on:
      global-neo4j:
        condition: service_healthy
      kg-seeder:
        condition: service_completed_successfully
    volumes:
      - .:/workspace:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - unified-sports-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # System Health Monitor
  health-monitor:
    image: nginx:alpine
    container_name: unified-health-monitor
    ports:
      - "8080:80"
    volumes:
      - ./monitoring/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./monitoring/status.html:/usr/share/nginx/html/index.html:ro
    depends_on:
      - global-neo4j
      - enhanced-crawl4ai-rag
      - prem-intel-service
      - unified-mcp-server
    networks:
      - unified-sports-network

volumes:
  global_neo4j_data:
    driver: local
  global_neo4j_logs:
    driver: local
  global_neo4j_import:
    driver: local
  global_neo4j_plugins:
    driver: local
  crawl4ai_cache:
    driver: local

networks:
  unified-sports-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 