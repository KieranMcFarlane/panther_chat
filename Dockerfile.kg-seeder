# Knowledge Graph Seeder for Unified Sports Intelligence System
FROM node:18-alpine

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache curl bash

# Copy package files
COPY yellow-panther-ai/package*.json ./
RUN npm install

# Copy seeding scripts and data
COPY yellow-panther-ai/scripts/ ./scripts/
COPY yellow-panther-ai/scraping_data/ ./scraping_data/
COPY prem-intel-graph/data/ ./prem_intel_data/

# Create enhanced seeding script that combines both schemas
COPY <<EOF ./scripts/unified_seed.js
const neo4j = require('neo4j-driver');
const fs = require('fs');
const path = require('path');

const driver = neo4j.driver(
  process.env.NEO4J_URI,
  neo4j.auth.basic(process.env.NEO4J_USER, process.env.NEO4J_PASSWORD)
);

async function seedUnifiedKnowledgeGraph() {
  console.log('🌍 Starting Unified Sports Intelligence Knowledge Graph Seeding...');
  
  // Load the existing seedGraph.js logic
  const { seedComprehensiveSportsGraph } = require('./seedGraph.js');
  
  // Seed the comprehensive sports world data
  await seedComprehensiveSportsGraph();
  
  // Load Premier League intelligence data
  const agencyLinksPath = path.join(__dirname, '../prem_intel_data/agency_links.json');
  let premIntelData = {};
  
  try {
    premIntelData = JSON.parse(fs.readFileSync(agencyLinksPath, 'utf8'));
    console.log('✅ Loaded Premier League intelligence data');
  } catch (error) {
    console.warn('⚠️  Premier League data not found, using base setup only');
  }
  
  const session = driver.session();
  
  try {
    // Apply unified schema extensions
    console.log('📊 Applying unified schema extensions...');
    
    const schemaExtensions = [
      // Business Intelligence Extensions
      "CREATE CONSTRAINT IF NOT EXISTS FOR (a:Agency) REQUIRE a.name IS UNIQUE",
      "CREATE CONSTRAINT IF NOT EXISTS FOR (s:Stakeholder) REQUIRE s.id IS UNIQUE", 
      "CREATE CONSTRAINT IF NOT EXISTS FOR (r:Role) REQUIRE r.title IS UNIQUE",
      "CREATE CONSTRAINT IF NOT EXISTS FOR (sig:Signal) REQUIRE sig.id IS UNIQUE",
      "CREATE CONSTRAINT IF NOT EXISTS FOR (st:SignalType) REQUIRE st.name IS UNIQUE",
      
      // Technical Analysis Extensions
      "CREATE CONSTRAINT IF NOT EXISTS FOR (repo:Repository) REQUIRE repo.name IS UNIQUE",
      "CREATE CONSTRAINT IF NOT EXISTS FOR (f:File) REQUIRE (f.path, f.repository) IS UNIQUE",
      
      // Enhanced Signal Types
      "MERGE (st:SignalType {name: 'Code Analysis'})",
      "MERGE (st:SignalType {name: 'Technical Debt'})",
      "MERGE (st:SignalType {name: 'AI Hallucination'})",
      "MERGE (st:SignalType {name: 'Digital Transformation'})",
      "MERGE (st:SignalType {name: 'Tech Investment'})",
      "MERGE (st:SignalType {name: 'Partnership Opportunity'})",
      "MERGE (st:SignalType {name: 'Stakeholder Movement'})",
      "MERGE (st:SignalType {name: 'Innovation Signal'})"
    ];
    
    for (const query of schemaExtensions) {
      try {
        await session.run(query);
      } catch (error) {
        console.warn(\`Schema query failed: \${query} - \${error.message}\`);
      }
    }
    
    // Enhance Premier League organization
    console.log('🏆 Enhancing Premier League organization...');
    
    const enhanceQuery = \`
    MATCH (pl:SportingOrganization {name: 'Premier League'})
    SET pl.enhanced = true,
        pl.intelligence_system = 'Active',
        pl.last_intelligence_update = datetime(),
        pl.digital_maturity_assessment = 'High',
        pl.business_intelligence_enabled = true,
        pl.technical_analysis_enabled = true
    RETURN pl
    \`;
    
    await session.run(enhanceQuery);
    
    // Create agencies from Premier League data
    if (premIntelData.agencies) {
      console.log('🏢 Creating agencies from Premier League intelligence data...');
      
      for (const agency of premIntelData.agencies) {
        const agencyQuery = \`
        MERGE (a:Agency {name: $name})
        ON CREATE SET 
            a.specialty = $specialty,
            a.past_work = $past_work,
            a.tier = 'Premier League Partner',
            a.created_at = datetime(),
            a.source = 'Premier League Intelligence'
        ON MATCH SET
            a.last_updated = datetime()
        \`;
        
        await session.run(agencyQuery, {
          name: agency.name,
          specialty: agency.specialty,
          past_work: agency.pastWork
        });
        
        // Link agency to Premier League
        const linkQuery = \`
        MATCH (pl:SportingOrganization {name: 'Premier League'})
        MATCH (a:Agency {name: $agency_name})
        MERGE (pl)-[:has_agency_relationship]->(a)
        \`;
        
        await session.run(linkQuery, { agency_name: agency.name });
      }
    }
    
    console.log('✅ Unified Sports Intelligence Knowledge Graph seeded successfully!');
    
  } finally {
    await session.close();
    await driver.close();
  }
}

seedUnifiedKnowledgeGraph().catch(console.error);
EOF

# Make the seeding script executable
RUN chmod +x ./scripts/unified_seed.js

# Set the default command
CMD ["node", "scripts/unified_seed.js"] 